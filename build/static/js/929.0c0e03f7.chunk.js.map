{"version":3,"file":"static/js/929.0c0e03f7.chunk.js","mappings":"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","sources":["components/TomTomMap/index.js","modules/routes/actionCreators/editRoute.js","containers/RoutePage.js","modules/app/actionCreators/enqueueNotification.js","hooks/useNotification.js","modules/routes/actionCreators/addRoute.js"],"sourcesContent":["import { useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport tt from \"@tomtom-international/web-sdk-maps\";\nimport mapServices from \"@tomtom-international/web-sdk-services\";\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\n\nconst popupOffsets = {\n  top: [0, 0],\n  bottom: [0, -50],\n  left: [25, -35],\n  right: [-25, -35],\n};\nconst TOM_TOM_KEY = \"lShoCSsBrDekAITrQwqPHTfXZI47gzFH\";\n\nconst Map = ({ stops }) => {\n  const mapElement = useRef();\n\n  const mapZoom = 3;\n\n  useEffect(() => {\n    let map = tt.map({\n      key: TOM_TOM_KEY,\n      container: mapElement.current,\n      center: [stops[0].longitude, stops[0].latitude],\n      zoom: mapZoom,\n      stylesVisibility: {\n        trafficIncidents: true,\n        trafficFlow: true,\n      },\n    });\n\n    const locations = [];\n\n    stops.forEach((stop) =>\n      locations.push(stop.longitude + \",\" + stop.latitude)\n    );\n\n    mapServices.services\n      .calculateRoute({\n        key: TOM_TOM_KEY,\n        locations: locations.join(\":\"),\n      })\n      .then(function (response) {\n        var geojson = response.toGeoJson();\n        map.addLayer({\n          id: \"route\",\n          type: \"line\",\n          source: {\n            type: \"geojson\",\n            data: geojson,\n          },\n          paint: {\n            \"line-color\": \"#00d7ff\",\n            \"line-width\": 2,\n          },\n        });\n        var bounds = new tt.LngLatBounds();\n        geojson.features[0].geometry.coordinates.forEach((point) =>\n          bounds.extend(tt.LngLat.convert(point))\n        );\n        map.fitBounds(bounds, { padding: 20 });\n      });\n\n    stops.forEach((stop) => {\n      let marker = new tt.Marker({\n        draggable: false,\n      })\n        .setLngLat([stop.longitude, stop.latitude])\n        .addTo(map);\n      let popup = new tt.Popup({ offset: popupOffsets }).setHTML(stop.name);\n      marker.setPopup(popup);\n    });\n\n    return () => map.remove();\n  }, [stops]);\n\n  //   useEffect(() => {\n  //     if (!longitude || !latitude) {\n  //       setDefaultCoordinates();\n  //     }\n  //   }, [latitude, longitude]);\n\n  //   const setDefaultCoordinates = () => {\n  //     const defLatitude = 0;\n  //     const defLongitude = 0;\n  //     if (location) {\n  //       defLatitude = location.getCurrentPosition(\n  //         (position) => position.coords.latitude\n  //       );\n  //       defLongitude = location.getCurrentPosition(\n  //         (position) => position.coords.longitude\n  //       );\n  //     }\n  //     setMapLatitude(defLatitude);\n  //     setMapLongitude(defLongitude);\n  //   };\n\n  //   const increaseZoom = () => {\n  //     if (mapZoom < MAX_ZOOM) {\n  //       setMapZoom(mapZoom + 1);\n  //     }\n  //   };\n\n  //   const decreaseZoom = () => {\n  //     if (mapZoom > 1) {\n  //       setMapZoom(mapZoom - 1);\n  //     }\n  //   };\n\n  //   const updateMap = () => {\n  //     map.setCenter([parseFloat(mapLongitude), parseFloat(mapLatitude)]);\n  //     map.setZoom(mapZoom);\n  //   };\n\n  return <div ref={mapElement} className=\"mapDiv\" />;\n};\n\nexport default Map;\n","import { EDIT_ROUTE } from \"../actions\";\n\nconst editRoute = (routeId, postData) => {\n  return async (dispatch) => {\n    dispatch({\n      type: EDIT_ROUTE,\n      payload: {\n        id: routeId,\n        data: postData,\n      },\n    });\n  };\n};\n\nexport default editRoute;\n","import {\n  Toolbar,\n  Button,\n  Grid,\n  TextField,\n  Card,\n  CardContent,\n  CardHeader,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  FormLabel,\n  ToggleButton,\n  CardActions,\n} from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport useNotification from \"../hooks/useNotification\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport addRoute from \"../modules/routes/actionCreators/addRoute\";\nimport editRoute from \"../modules/routes/actionCreators/editRoute\";\nimport Map from \"../components/TomTomMap\";\n\nconst initialValue = {\n  name: \"\",\n  id: uuidv4(),\n  direction: \"up\",\n  is_active: true,\n  stops: [\n    { id: uuidv4(), name: \"\", latitude: \"\", longitude: \"\" },\n    { id: uuidv4(), name: \"\", latitude: \"\", longitude: \"\" },\n  ],\n};\n\nconst RoutePage = () => {\n  const navigate = useNavigate();\n  const notify = useNotification();\n  const dispatch = useDispatch();\n  const params = useParams();\n  const routeId = params.routeId;\n\n  const [routeDetails, setRouteDetails] = useState(initialValue);\n\n  const routes = useSelector((state) => state.routes.routes);\n\n  useEffect(() => {\n    if (!!routeId && !!routes && routes.length > 0) {\n      setRouteDetails(routes.find((route) => route.id === routeId));\n    }\n  }, [routeId]);\n\n  const handleChange = (field) => (value) => {\n    if (routeDetails[field] !== value) {\n      setRouteDetails({ ...routeDetails, [field]: value });\n    }\n  };\n\n  const handleStopChange = (index) => (field) => (value) => {\n    setRouteDetails({\n      ...routeDetails,\n      stops: routeDetails.stops.map((item, i) => {\n        return i !== index ? item : { ...item, [field]: value };\n      }),\n    });\n  };\n\n  const deleteStop = (index) => {\n    if (routeDetails.stops.length < 3) {\n      return;\n    }\n    setRouteDetails({\n      ...routeDetails,\n      stops: routeDetails.stops.filter((item, i) => i !== index),\n    });\n  };\n\n  const addStop = () => {\n    setRouteDetails({\n      ...routeDetails,\n      stops: [...routeDetails.stops, initialValue.stops],\n    });\n  };\n\n  const handleSubmit = () => {\n    routeId\n      ? dispatch(editRoute(routeId, routeDetails)).then(() => {\n          notify.success(\"Route edited successfully\");\n          navigate(\"/route-list\");\n        })\n      : dispatch(addRoute(routeDetails)).then(() => {\n          notify.success(\"New Route added successfully\");\n          navigate(\"/route-list\");\n        });\n  };\n\n  return (\n    <>\n      <Toolbar sx={{ justifyContent: \"end\" }}>\n        <Button\n          onClick={() => {\n            navigate(\"/route-list\");\n          }}\n          variant=\"contained\"\n        >\n          Back to Routes\n        </Button>\n      </Toolbar>\n      <Grid container spacing={2}>\n        <Grid item xs={6} sx={{ my: 2 }}>\n          <Card\n            sx={{\n              my: 2,\n              backgroundColor: \"#f7fafd\",\n              borderRadius: 2,\n            }}\n            elevation={0}\n          >\n            <CardHeader title=\"Add/Edit Route\" />\n            <CardContent>\n              <TextField\n                size=\"small\"\n                autoFocus\n                value={routeDetails.name}\n                fullWidth\n                required\n                label=\"Route Name\"\n                sx={{ my: 1 }}\n                onChange={(e) => handleChange(\"name\")(e.target.value)}\n              />\n              <FormControl sx={{ py: 1, width: \"100%\" }}>\n                <FormLabel>Direction?</FormLabel>\n                <RadioGroup\n                  row\n                  aria-labelledby=\"demo-row-radio-buttons-group-label\"\n                  name=\"row-radio-buttons-group\"\n                  value={routeDetails.direction}\n                  onChange={(e) => handleChange(\"direction\")(e.target.value)}\n                >\n                  <FormControlLabel value=\"up\" control={<Radio />} label=\"Up\" />\n                  <FormControlLabel\n                    value=\"down\"\n                    control={<Radio />}\n                    label=\"Down\"\n                  />\n                </RadioGroup>\n              </FormControl>\n\n              <ToggleButton\n                size=\"small\"\n                sx={{ py: 1 }}\n                color={!routeDetails.is_active ? \"warning\" : \"success\"}\n                value={routeDetails.is_active}\n                selected={routeDetails.is_active}\n                onChange={() => {\n                  handleChange(\"is_active\")(!routeDetails.is_active);\n                }}\n              >\n                {routeDetails.is_active ? \"Active\" : \"Inactive\"}\n              </ToggleButton>\n\n              {routeDetails.stops.map((stop, index) => (\n                <Card\n                  sx={{\n                    my: 2,\n                    p: 2,\n                    borderRadius: 2,\n                  }}\n                  elevation={0}\n                  key={`stops-${index}`}\n                >\n                  <CardHeader\n                    title={`Stop ${index + 1}`}\n                    action={\n                      index !== 0 && index !== 1 ? (\n                        <Button\n                          variant=\"outlined\"\n                          color=\"error\"\n                          onClick={() => deleteStop(index)}\n                          size=\"small\"\n                        >\n                          Delete\n                        </Button>\n                      ) : null\n                    }\n                  />\n                  <TextField\n                    size=\"small\"\n                    fullWidth\n                    required\n                    id=\"outlined-required\"\n                    label=\"Stop Name\"\n                    margin=\"dense\"\n                    value={stop.name}\n                    onChange={(e) => {\n                      handleStopChange(index)(\"name\")(e.target.value);\n                    }}\n                  />\n                  <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                      {\" \"}\n                      <TextField\n                        size=\"small\"\n                        fullWidth\n                        required\n                        id=\"outlined-required\"\n                        label=\"Latitude\"\n                        margin=\"dense\"\n                        value={stop.latitude}\n                        onChange={(e) => {\n                          handleStopChange(index)(\"latitude\")(e.target.value);\n                        }}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <TextField\n                        size=\"small\"\n                        fullWidth\n                        required\n                        id=\"outlined-required\"\n                        label=\"Longitude\"\n                        margin=\"dense\"\n                        value={stop.longitude}\n                        onChange={(e) => {\n                          handleStopChange(index)(\"longitude\")(e.target.value);\n                        }}\n                      />\n                    </Grid>\n                  </Grid>\n                </Card>\n              ))}\n\n              <Button\n                variant=\"outlined\"\n                onClick={() => addStop()}\n                fullWidth\n                sx={{ my: 2 }}\n                size=\"small\"\n              >\n                Add Stop\n              </Button>\n            </CardContent>\n            <CardActions>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                onClick={() => handleSubmit()}\n              >\n                Submit\n              </Button>\n            </CardActions>\n          </Card>\n        </Grid>\n        {!!routeId && !!routeDetails && !!routeDetails.stops && (\n          <Grid item xs={6} sx={{ my: 3 }}>\n            <Card>\n              <CardHeader title={routeDetails.name} />\n              <CardContent sx={{ height: \"50vh\" }}>\n                <Map\n                  stops={\n                    routeDetails.direction !== \"up\"\n                      ? routeDetails.stops.reverse()\n                      : routeDetails.stops\n                  }\n                />\n              </CardContent>\n            </Card>\n          </Grid>\n        )}\n      </Grid>\n    </>\n  );\n};\n\nexport default RoutePage;\n","import { v4 as uuidv4 } from \"uuid\";\nimport { ENQUEUE_NOTIFICATION } from \"../actions\";\n\nconst enqueueNotification = (content, notificationType) => {\n  return async (dispatch) => {\n    dispatch({\n      type: ENQUEUE_NOTIFICATION,\n      payload: {\n        content: content,\n        notificationType: notificationType,\n        id: uuidv4()\n      }\n    });\n  };\n};\n\nexport default enqueueNotification;\n","import get from \"lodash/get\";\nimport { useDispatch } from \"react-redux\";\n\nimport enqueueNotification from \"../modules/app/actionCreators/enqueueNotification\";\n\nconst useNotification = () => {\n  const dispatch = useDispatch();\n  return {\n    error: (content) => {\n      return dispatch(enqueueNotification(content, \"error\"));\n    },\n    success: (content) => {\n      return dispatch(enqueueNotification(content, \"success\"));\n    },\n    info: (content) => {\n      return dispatch(enqueueNotification(content, \"info\"));\n    },\n    warning: (content) => {\n      return dispatch(enqueueNotification(content, \"warning\"));\n    },\n\n    apiError: (defaultMessage, callback, path = \"response.data.message\") => (\n      error\n    ) => {\n      dispatch(enqueueNotification(get(error, path, defaultMessage), \"error\"));\n      if (typeof callback === \"function\") {\n        callback(error);\n      }\n    }\n  };\n};\n\nexport default useNotification;\n","import { ADD_ROUTE } from \"../actions\";\n\nconst addRoute = (postData) => {\n  return async (dispatch) => {\n    dispatch({\n      type: ADD_ROUTE,\n      payload: postData,\n    });\n  };\n};\n\nexport default addRoute;\n"],"names":["popupOffsets","top","bottom","left","right","TOM_TOM_KEY","stops","mapElement","useRef","useEffect","map","tt","key","container","current","center","longitude","latitude","zoom","stylesVisibility","trafficIncidents","trafficFlow","locations","forEach","stop","push","mapServices","join","then","response","geojson","toGeoJson","addLayer","id","type","source","data","paint","bounds","features","geometry","coordinates","point","extend","fitBounds","padding","marker","draggable","setLngLat","addTo","popup","offset","setHTML","name","setPopup","remove","ref","className","routeId","postData","dispatch","EDIT_ROUTE","payload","initialValue","uuidv4","direction","is_active","navigate","useNavigate","notify","useNotification","useDispatch","useParams","useState","routeDetails","setRouteDetails","routes","useSelector","state","length","find","route","handleChange","field","value","handleStopChange","index","item","i","Toolbar","sx","justifyContent","Button","onClick","variant","Grid","spacing","xs","my","Card","backgroundColor","borderRadius","elevation","CardHeader","title","CardContent","TextField","size","autoFocus","fullWidth","required","label","onChange","e","target","FormControl","py","width","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","ToggleButton","color","selected","p","action","filter","deleteStop","margin","CardActions","editRoute","success","addRoute","height","reverse","content","notificationType","ENQUEUE_NOTIFICATION","error","enqueueNotification","info","warning","apiError","defaultMessage","callback","path","get","ADD_ROUTE"],"sourceRoot":""}